# default base image
ARG COMMON_WORKDIR=/app
ARG BASE_IMAGE=rocm/pytorch:rocm7.0.2_ubuntu24.04_py3.12_pytorch_release_2.8.0
ARG VLLM_BASE_IMAGE=itterative/vllm-base:v0.11.0
ARG VLLM_REPO=https://github.com/vllm-project/vllm.git
ARG VLLM_BRANCH=releases/v0.11.1
ARG VLLM_PATCH=patches/v0.11.1.patch
ARG ARG_PYTORCH_ROCM_ARCH=gfx1101;gfx1100;gfx1200;gfx1201

FROM ${BASE_IMAGE} AS base

# Install some basic utilities
RUN apt-get update -q -y && apt-get install -q -y \
    sqlite3 libsqlite3-dev libfmt-dev libmsgpack-dev libsuitesparse-dev \
    apt-transport-https ca-certificates wget curl
# Remove sccache    
RUN python3 -m pip install --upgrade pip
RUN apt-get purge -y sccache; python3 -m pip uninstall -y sccache; rm -f "$(which sccache)"
RUN apt-get install -y ccache
ARG COMMON_WORKDIR
WORKDIR ${COMMON_WORKDIR}


# -----------------------
# vLLM fetch stages
FROM base AS fetch_vllm
ARG VLLM_REPO
ARG VLLM_BRANCH
ARG VLLM_PATCH
COPY ${VLLM_PATCH} vllm.patch
RUN git clone ${VLLM_REPO} \
    && cd vllm \
    && git checkout ${VLLM_BRANCH} \
    && git apply ../vllm.patch

# -----------------------
# vLLM build stages
FROM fetch_vllm AS build_vllm
ENV CCACHE_DIR=/root/.cache/ccache
ARG ARG_PYTORCH_ROCM_ARCH
ENV PYTORCH_ROCM_ARCH=${ARG_PYTORCH_ROCM_ARCH:-${PYTORCH_ROCM_ARCH}}
# Build vLLM
RUN --mount=type=cache,id=pip,target=/root/.cache/pip \
    pip install -U packaging 'cmake<4' ninja wheel 'setuptools<80' pybind11 Cython
RUN --mount=type=cache,id=pip,target=/root/.cache/pip \
    --mount=type=cache,id=ccache,target=/root/.cache/ccache \
    cd vllm \
    && python3 -m pip install -r requirements/rocm.txt \
    && python3 setup.py clean --all  \
    && python3 setup.py bdist_wheel --dist-dir=dist

FROM scratch AS export_vllm
ARG COMMON_WORKDIR
COPY --from=build_vllm ${COMMON_WORKDIR}/vllm/dist/*.whl /
COPY --from=build_vllm ${COMMON_WORKDIR}/vllm/requirements /requirements
COPY --from=build_vllm ${COMMON_WORKDIR}/vllm/benchmarks /benchmarks
COPY --from=build_vllm ${COMMON_WORKDIR}/vllm/tests /tests
COPY --from=build_vllm ${COMMON_WORKDIR}/vllm/examples /examples

FROM ${VLLM_BASE_IMAGE} AS base_vllm

# -----------------------
# Final vLLM image
FROM ${BASE_IMAGE} AS final

RUN pip install --upgrade huggingface-hub[cli]

# Install vLLM
RUN --mount=type=bind,from=base_vllm,src=/install-dependencies,target=/install \
    --mount=type=cache,id=pip,target=/root/.cache/pip \
    pip install /install/*.whl
RUN --mount=type=bind,from=export_vllm,src=/,target=/install \
    --mount=type=cache,id=pip,target=/root/.cache/pip \
    pip install /install/*.whl


# Copy over the benchmark scripts as well
COPY --from=export_vllm /benchmarks ${COMMON_WORKDIR}/vllm/benchmarks
COPY --from=export_vllm /examples ${COMMON_WORKDIR}/vllm/examples

ENV RAY_EXPERIMENTAL_NOSET_ROCR_VISIBLE_DEVICES=1
ENV RAY_EXPERIMENTAL_NOSET_HIP_VISIBLE_DEVICES=1
ENV TOKENIZERS_PARALLELISM=false

# ENV that can improve safe tensor loading, and end-to-end time
ENV SAFETENSORS_FAST_GPU=1

# Performance environment variable.
ENV HIP_FORCE_DEV_KERNARG=1

CMD ["vllm"]
